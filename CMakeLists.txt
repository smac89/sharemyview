# this is the build file for project 
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(capture LANGUAGES CXX)

# target
add_executable(capture "")
set_target_properties(capture PROPERTIES OUTPUT_NAME "capture")
set_target_properties(capture PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
add_dependencies(capture libcapture)
target_include_directories(capture PRIVATE
    include
)
target_include_directories(capture SYSTEM PRIVATE
    /usr/include/SDL2
)
target_compile_definitions(capture PRIVATE
    _REENTRANT
    SPDLOG_SHARED_LIB
    SPDLOG_COMPILED_LIB
    SPDLOG_FMT_EXTERNAL
)
target_compile_options(capture PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-mshstk>
    $<$<COMPILE_LANGUAGE:CXX>:-mshstk>
    $<$<COMPILE_LANGUAGE:C>:-fstack-protector-strong>
    $<$<COMPILE_LANGUAGE:CXX>:-fstack-protector-strong>
)
if(MSVC)
    target_compile_options(capture PRIVATE -W4)
else()
    target_compile_options(capture PRIVATE -Wall -Wextra)
endif()
set_target_properties(capture PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(capture PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(capture PRIVATE nil)
else()
    target_compile_options(capture PRIVATE -O1)
endif()
if(MSVC)
    target_compile_options(capture PRIVATE -Zi)
else()
    target_compile_options(capture PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET capture PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(capture PRIVATE
    SDL2
    spdlog
    fmt
    libcapture
    Xi
    Xext
    Xfixes
    X11-xcb
    X11
    xcb-util
    xcb-ewmh
    xcb-icccm
    xcb-errors
    xcb-composite
    xcb-damage
    xcb-dbe
    xcb-dpms
    xcb-dri2
    xcb-dri3
    xcb-glx
    xcb-present
    xcb-randr
    xcb-record
    xcb-render
    xcb-res
    xcb-screensaver
    xcb-shape
    xcb-shm
    xcb-sync
    xcb-xf86dri
    xcb-xfixes
    xcb-xinerama
    xcb-xinput
    xcb-xkb
    xcb-xtest
    xcb-xv
    xcb-xvmc
    xcb
    Xau
    Xdmcp
    assert
    pthread
)
target_link_directories(capture PRIVATE
    /usr/lib
    build/linux/x86_64/debug
    /home/chigozirim/.xmake/packages/x/xcb-util-errors/1.0/f8f0bd746d0941a9a8e0d963105778f9/lib
    /opt/vcpkg/installed/x64-linux/lib
)
target_link_options(capture PRIVATE
    -m64
    -pthread
)
target_sources(capture PRIVATE
    src/main.cpp
)

# target
add_library(libcapture STATIC "")
set_target_properties(libcapture PROPERTIES OUTPUT_NAME "libcapture")
set_target_properties(libcapture PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(libcapture PRIVATE
    include
    src/common
)
target_include_directories(libcapture SYSTEM PRIVATE
    /home/chigozirim/.xmake/packages/x/xcb-util-errors/1.0/f8f0bd746d0941a9a8e0d963105778f9/include
    /opt/vcpkg/installed/x64-linux/include
)
target_compile_definitions(libcapture PRIVATE
    SPDLOG_SHARED_LIB
    SPDLOG_COMPILED_LIB
    SPDLOG_FMT_EXTERNAL
)
target_compile_options(libcapture PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-mshstk>
    $<$<COMPILE_LANGUAGE:CXX>:-mshstk>
)
if(MSVC)
    target_compile_options(libcapture PRIVATE -W4)
else()
    target_compile_options(libcapture PRIVATE -Wall -Wextra)
endif()
if(MSVC)
    target_compile_options(libcapture PRIVATE nil)
else()
    target_compile_options(libcapture PRIVATE -O1)
endif()
if(MSVC)
    target_compile_options(libcapture PRIVATE -Zi)
else()
    target_compile_options(libcapture PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET libcapture PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(libcapture PRIVATE
    spdlog
    fmt
    xcb
    Xi
    Xext
    Xfixes
    X11-xcb
    X11
    xcb-composite
    xcb-damage
    xcb-dbe
    xcb-dpms
    xcb-dri2
    xcb-dri3
    xcb-glx
    xcb-present
    xcb-randr
    xcb-record
    xcb-render
    xcb-res
    xcb-screensaver
    xcb-shape
    xcb-shm
    xcb-sync
    xcb-xf86dri
    xcb-xfixes
    xcb-xinerama
    xcb-xinput
    xcb-xkb
    xcb-xtest
    xcb-xv
    xcb-xvmc
    Xau
    Xdmcp
    xcb-util
    xcb-ewmh
    xcb-icccm
    xcb-errors
    assert
    pthread
)
target_link_directories(libcapture PRIVATE
    /home/chigozirim/.xmake/packages/x/xcb-util-errors/1.0/f8f0bd746d0941a9a8e0d963105778f9/lib
    /opt/vcpkg/installed/x64-linux/lib
)
target_link_options(libcapture PRIVATE
    -m64
    -pthread
)
target_sources(libcapture PRIVATE
    src/linux/winclient.cpp
    src/linux/windowobject.cpp
)

# target
add_executable(sdlapp "")
set_target_properties(sdlapp PROPERTIES OUTPUT_NAME "sdlapp")
set_target_properties(sdlapp PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(sdlapp SYSTEM PRIVATE
    /usr/include/SDL2
    /opt/vcpkg/installed/x64-linux/include
)
target_compile_definitions(sdlapp PRIVATE
    HELLOIMGUI_USE_SDL2
    HELLOIMGUI_HAS_OPENGL3
    _REENTRANT
    SPDLOG_SHARED_LIB
    SPDLOG_COMPILED_LIB
    SPDLOG_FMT_EXTERNAL
)
target_compile_options(sdlapp PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-mshstk>
    $<$<COMPILE_LANGUAGE:CXX>:-mshstk>
)
if(MSVC)
    target_compile_options(sdlapp PRIVATE -W4)
else()
    target_compile_options(sdlapp PRIVATE -Wall -Wextra)
endif()
set_target_properties(sdlapp PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(sdlapp PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(sdlapp PRIVATE nil)
else()
    target_compile_options(sdlapp PRIVATE -O1)
endif()
if(MSVC)
    target_compile_options(sdlapp PRIVATE -Zi)
else()
    target_compile_options(sdlapp PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET sdlapp PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(sdlapp PRIVATE
    SDL2
    spdlog
    fmt
    hello_imgui
    stb_hello_imgui
    imgui
)
target_link_directories(sdlapp PRIVATE
    /usr/lib
    /opt/vcpkg/installed/x64-linux/lib
)
target_link_options(sdlapp PRIVATE
    -m64
    -pthread
)
target_sources(sdlapp PRIVATE
    example/sdl.cpp
)

